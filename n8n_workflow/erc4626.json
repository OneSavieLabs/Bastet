{
  "name": "erc4626",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "id": "e3e317b4-ecfb-4110-a607-23bab593c9d4",
      "name": "When chat message received",
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        -1120,
        260
      ],
      "webhookId": "471f4f97-1fd4-4312-b3ee-6fcc3310611d"
    },
    {
      "parameters": {
        "content": "## Knowledge:\nERC4626\nhttps://hackmd.io/@jbuCOBZvRjaiqc9WpSNXMg/HyPD8iL8R",
        "height": 120,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1420,
        80
      ],
      "id": "b36e2cde-b8f0-4bc6-a9cc-01916521cf1e",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "### Rounding\nhttps://github.com/code-423n4/2022-06-notional-coop/blob/main/notional-wrapped-fcash/contracts/wfCashERC4626.sol#L186-L191",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -420,
        -280
      ],
      "id": "dfe3cc0a-44e4-4618-8fe1-03552a4b704f",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "### Global and user-specific limits\nhttps://github.com/code-423n4/2023-05-maia/blob/main/src/maia/tokens/ERC4626PartnerManager.sol#L174",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -420,
        120
      ],
      "id": "20e477c7-438b-4d02-a301-6a0b75f6405e",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**ERC4626 Rounding**\nERC-4626 vault implementations need to consider the rounding direction of different function implementations, as it is safer to prioritize the vault itself over the user in the computation.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\nCheck out the following sample code:\n\n```solidity\nfunction withdraw(\n        uint256 assets,\n        address receiver,\n        address owner\n    ) public nonReentrant returns (uint256 shares) {\n        if (receiver == address(0)) revert InvalidReceiver();\n        shares = convertToShares(assets);\n/// .... [skipped the code]\n\nfunction convertToShares(uint256 assets) public view returns (uint256) {\n        uint256 supply = totalSupply(); \n\n        return\n            supply == 0\n                ? assets\n                : assets.mulDiv(supply, totalAssets(), Math.Rounding.Down);\n    }\n```\n\nin the above example, convertToShares() uses Rounding.Down, assuming the vault state is as follows:\n\nTotal Asset = 1000 WETH\nTotal Supply = 10 shares\n\nConsider this scenario, Alice wants to withdraw 99 WETH from the vault, which is calculated as 99 * 10/1000, and due to rounding down, the value of the postback is 0, Alice can withdraw the asset from the vault without having to burn its share.\n\n**Suggestion**\n\nFor more information on the rounding direction of different functions in the vault, please refer to\n\nhttps://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/ERC4626.sol\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output exactly: **\"There’s no such issue.\"**\n\nOtherwise, follow the format below:\n\n```\n### Summary\nERC4626 Rounding\n\n### Vulnerability Details\n1. **File Name:** [Insert File Name\u001d, if input is not a file and cannot justify file name, leave blank]\n2. **Function Name(s):** [The functions where the issue occur]\n3. **Description:**\n[Describe vulnerability details]\n\n### Code Snippet\n[The lines where the vulnerability occurs]\n\n### Recommendation\n[Provide brief recommendations, do not need to mention Audit and Testing, do not need Code Snippet.]\n```",
              "role": "system"
            },
            {
              "content": "={{ $json.chatInput }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "maxTokens": 16000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        -420,
        -100
      ],
      "id": "6054b4ee-005d-49b9-a1a1-23814cea3391",
      "name": "ERC4626-Rounding",
      "credentials": {
        "openAiApi": {
          "id": "j2EqOAWsZ02BwUUN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Global and user-specific limits**\nWhen implementing a vault, it may happen that certain functions in the vault may be suspended due to urgent withdrawals or intentional by design, and some functions need to take into account these global state changes or user-specific restrictions.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\nCheck out the following sample code:\n\n```solidity\nfunction deposit(uint256 assets, address receiver) external nonReentrant whenNotPaused returns (uint256) {\n        uint256 shares = previewDeposit(assets);\n        require(shares > 0, \"ZERO_SHARES\");\n        /// .... [skipped the code]\n    }\nfunction maxDeposit(address) public view virtual returns (uint256) {\n        return type(uint256).max;\n    }\n```\n\nwhenTokenNotPaused's modifier checks if the state at which deposit() was executed, and if the vault happens to be paused, maxDeposit() returns a value that can't actually be deposited, causing any component that relies on these functions to pass back the correct value to fail.\n\n**Suggestion**\n\nAccording to EIP 4626, maxDeposit(), maxMint(), maxWithdraw(), and maxRedeem() need to be taken into account global state or user-specific restrictions, and must be passed back to 0 if completely deactivated (even temporarily).\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output exactly: **\"There’s no such issue.\"**\n\nOtherwise, follow the format below:\n\n```\n### Summary\nGlobal and user-specific limits\n\n### Vulnerability Details\n1. **File Name:** [Insert File Name\u001d, if input is not a file and cannot justify file name, leave blank]\n2. **Function Name(s):** [The functions where the issue occur]\n3. **Description:**\n[Describe vulnerability details]\n\n### Code Snippet\n[The lines where the vulnerability occurs]\n\n### Recommendation\n[Provide brief recommendations, do not need to mention Audit and Testing, do not need Code Snippet.]\n```",
              "role": "system"
            },
            {
              "content": "={{ $json.chatInput }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "maxTokens": 16000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        -420,
        300
      ],
      "id": "b4babbee-d25b-4268-9b6c-0bcba765f0fe",
      "name": "ERC4626-Global and user-specific limits",
      "credentials": {
        "openAiApi": {
          "id": "j2EqOAWsZ02BwUUN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4o-mini",
          "mode": "list",
          "cachedResultName": "GPT-4O-MINI"
        },
        "messages": {
          "values": [
            {
              "content": "=You are a smart contract auditor. After reading the following vulnerability knowledge and understanding correct and incorrect examples, detect the problem in the contract code.\n\n### Vulnerability Knowledge\n\n**Fee**\nWhen designing vault-related applications, many project parties will charge for using some of the functions in the vault, and some functions need to consider the cost to be able to reflect truthfully.\n\n### Examples\n\n#### Example 1: Incorrect Example\n\nCheck out the following sample code:\n\n```solidity\n \n    function deposit(uint256 assets, address receiver) external nonReentrant whenNotPaused returns (uint256) {\n        uint256 fee = (assets * DEPOSIT_FEE_RATE) / MAX_FEE_RATE;\n        uint256 assetsAfterFee = assets - fee;\n        uint256 shares = _convertToShares(assetsAfterFee);\n\n        require(shares > 0, \"ZERO_SHARES\");\n\n        _mint(receiver, shares);\n        asset.safeTransferFrom(msg.sender, address(this), assetsAfterFee);\n        asset.safeTransferFrom(msg.sender, address(this), fee); // Transfer fee to the vault\n\n        emit Deposit(msg.sender, receiver, assetsAfterFee, shares, fee);\n        return shares;\n    }\n    \n    function previewDeposit(uint256 assets) public view virtual returns (uint256) {\n        return assets;\n    }\n\n```\n\nThere is a fee at the time of deposit, and the actual deposit amount is not the same as the value of the previewDeposit() return, which causes a value gap for the user or other contracts that integrate the vault.\n\n**Suggestion**\n\nAccording to EIP 4626, previewDeposit(), previewMint(), previewWithdraw(), and previewRedeem() are required to consider the expected fees charged when posting backs.\n\n### Task to Perform\nFollow the examples above to examine each contract and check if it contains this issue. If you find any potential issues, record them using the format below.\n\n### Output Format\n\nIf NO concrete vulnerability found, output exactly: **\"There’s no such issue.\"**\n\nOtherwise, follow the format below:\n\n```\n### Summary\nFee\n\n### Vulnerability Details\n1. **File Name:** [Insert File Name\u001d, if input is not a file and cannot justify file name, leave blank]\n2. **Function Name(s):** [The functions where the issue occur]\n3. **Description:**\n[Describe vulnerability details]\n\n### Code Snippet\n[The lines where the vulnerability occurs]\n\n### Recommendation\n[Provide brief recommendations, do not need to mention Audit and Testing, do not need Code Snippet.]\n```",
              "role": "system"
            },
            {
              "content": "={{ $json.chatInput }}"
            }
          ]
        },
        "jsonOutput": true,
        "options": {
          "maxTokens": 16000
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.7,
      "position": [
        -420,
        700
      ],
      "id": "fa11e1f9-0cce-4810-ba3b-e9b9b6bd1f7d",
      "name": "ERC4626-Fee",
      "credentials": {
        "openAiApi": {
          "id": "j2EqOAWsZ02BwUUN",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "### Fee\nhttps://github.com/code-423n4/2023-05-maia/blob/54a45beb1428d85999da3f721f923cbf36ee3d35/src/erc-4626/UlyssesERC4626.sol#L96-L106",
        "width": 380
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -420,
        520
      ],
      "id": "b6cdd763-f50f-41c1-a297-b7d431a38013",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        -1120,
        480
      ],
      "id": "5173abd2-f5f7-4a57-b59d-d6238a1054d0",
      "name": "Workflow Input Trigger"
    },
    {
      "parameters": {
        "numberInputs": 3
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        180,
        280
      ],
      "id": "539b7f9b-f1b0-4cee-95ce-2a5f968a5891",
      "name": "Merge"
    }
  ],
  "pinData": {},
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "ERC4626-Rounding",
            "type": "main",
            "index": 0
          },
          {
            "node": "ERC4626-Global and user-specific limits",
            "type": "main",
            "index": 0
          },
          {
            "node": "ERC4626-Fee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Workflow Input Trigger": {
      "main": [
        [
          {
            "node": "ERC4626-Rounding",
            "type": "main",
            "index": 0
          },
          {
            "node": "ERC4626-Global and user-specific limits",
            "type": "main",
            "index": 0
          },
          {
            "node": "ERC4626-Fee",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ERC4626-Rounding": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "ERC4626-Global and user-specific limits": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "ERC4626-Fee": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 2
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "674f891f-2d0b-4d75-8302-12f453a70536",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "c52f7c76a7b40b9b9f276c4afe2fd4fd3674ed446a15060094ec5f3a235bedb7"
  },
  "id": "MmWYPSRzUgL6jlju",
  "tags": [
    {
      "createdAt": "2025-03-20T08:14:08.895Z",
      "updatedAt": "2025-03-20T08:14:08.895Z",
      "id": "L8wrJSWKPRpbssNN",
      "name": "processor"
    }
  ]
}